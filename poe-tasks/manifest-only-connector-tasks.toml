# A shared set of tasks for Manifest-Only Airbyte connectors.
#
# Referenced from `airbyte-integrations/connectors/poe_tasks.toml` to apply to
# all non-Java and non-Python connectors. By process of elimination, this covers
# the manifest-only connectors.
#
# If you find this tasks file is picked up by a connector that is *not* a
# manifest-only connector, simply add a `poe_tasks.toml` file in the connector's
# directory, and this will override the connectors' tasks to not use this file.

[tasks]

get-connector-name = "basename ${POE_PWD}" # Use with -qq to get just the connector name
fetch-secrets = "airbyte-cdk secrets fetch ${POE_PWD}"

install = [
  "install-cdk-cli",
  "install-unit-tests-project",
]
install-cdk-cli = "uv tool install --upgrade 'airbyte-cdk[dev]'"
install-unit-tests-project.shell = '''
if [ -f ${POE_PWD}/unit_tests/pyproject.toml ]; then
  echo "Found 'unit_tests/pyproject.toml' file, installing unit tests..."
  cd ${POE_PWD}/unit_tests
  poetry install --no-root --all-extras
else
  echo "No unit tests defined; skipping unit tests installation."
fi
'''
test-all = [
  "test-unit-tests",
  "test-integration-tests",
]
test-unit-tests.shell = '''
set -eu # Ensure we return non-zero exit code upon failure

if [ -f ${POE_PWD}/unit_tests/pyproject.toml ]; then
  echo "Found 'unit_tests/pyproject.toml' file, running unit tests..."
  cd ${POE_PWD}/unit_tests
  poetry install --no-root --all-extras
  poetry run pytest --junitxml=${POE_PWD}/build/test-results/pytest-unit-tests-junit.xml
else
  echo "No unit tests defined; skipping unit tests."
fi
'''
test-integration-tests = "airbyte-cdk connector test ${POE_PWD}"
format-check = "echo 'No format check step for this connector.'"
lint-check = "echo 'No lint check step for this connector."

lock.shell = '''
set -eu # Ensure we return non-zero exit code upon failure

if [ -f ${POE_PWD}/unit_tests/pyproject.toml ]; then
  echo "Found 'unit_tests/pyproject.toml' file, locking unit tests project..."
  cd ${POE_PWD}/unit_tests
  poetry lock
else
  echo "No unit tests defined; skipping unit tests locking."
fi
'''

# Generic tasks (same across all connector types)

[tasks.get-language]
cmd = """yq eval '.data.tags[] | select(test("^language:")) | sub("language:","")' $PWD/metadata.yaml"""
help = "Get the language of the connector from its metadata.yaml file. Use with -qq to get just the language name."

[tasks.get-base-image]
cmd = """yq eval '.data.connectorBuildOptions.baseImage' $PWD/metadata.yaml"""
help = "Get the base image of the connector from its metadata.yaml file."

[tasks.get-local-version]
cmd = """yq eval '.data.dockerImageTag' $PWD/metadata.yaml"""
help = "Get the version of the connector from its metadata.yaml file. Use with -qq to get just the version."

[tasks.create-connector-registry-artifacts]
shell = '''
set -eu
VERSION=$(poe -qq get-local-version)
CONNECTOR_NAME=$(poe -qq get-connector-name)

# Create build directory
mkdir -p "build/releases/${VERSION}"

# Clear existing contents
rm -rf "build/releases/${VERSION}"/*

# Copy metadata.yaml
cp metadata.yaml "build/releases/${VERSION}/"

# Copy icon if it exists
if [ -f icon.svg ]; then
  cp icon.svg "build/releases/${VERSION}/"
fi

# Copy manifest-specific artifacts based on airbyte-ci analysis
if [ -f manifest.yaml ]; then
  cp manifest.yaml "build/releases/${VERSION}/"
fi

# Copy components.py if it exists (will be zipped by registry script)
if [ -f components.py ]; then
  cp components.py "build/releases/${VERSION}/"
fi

# Generate registry JSON files
${POE_GIT_DIR}/poe-tasks/create-connector-registry.sh "build/releases/${VERSION}"
'''
help = "Create local registry artifacts for this connector version in build/releases/{version}/"

[tasks.run-cat-tests]
shell = "airbyte-ci connectors --name=`poe -qq get-connector-name` test --only-step=acceptance"
help = "Run the legacy Airbyte-CI acceptance tests (CAT tests)."
