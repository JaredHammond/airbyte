import io.netifi.flatbuffers.plugin.tasks.FlatBuffers

plugins {
    id 'io.netifi.flatbuffers' version '1.0.7'
}

/* ------------------------------------------------------------
 * 1.  pick a flatc version and the right OS classifier
 * ---------------------------------------------------------- */
ext.flatcVersion = '2.0.8'                          // last release on Central&#8203;:contentReference[oaicite:0]{index=0}

def os  = org.gradle.internal.os.OperatingSystem.current()
def cls = os.isMacOsX()   ? 'distribution-osx' :
        os.isWindows()  ? 'distribution-windows' :
                'distribution-linux'     // default → Linux

/* ------------------------------------------------------------
 * 2.  declare a detached configuration that holds the tar.gz
 * ---------------------------------------------------------- */
configurations {
    flatc
}

dependencies {
    // artifact = group : name           : version : classifier    @ extension
    flatc "com.github.davidmoten:flatbuffers-compiler:${flatcVersion}:${cls}@tar.gz"
}

/* ------------------------------------------------------------
 * 3.  unpack the compiler into build/flatc and make it executable
 * ---------------------------------------------------------- */
def flatcDir = "build/flatc"

def unpackFlatc = tasks.register('unpackFlatc', Copy) {
    from { tarTree(resources.gzip(configurations.flatc.singleFile)) }
    into flatcDir
    doLast {
        if (!os.isWindows()) {
            file("$flatcDir/bin/flatc").setExecutable(true)
        }
    }
}

/* ------------------------------------------------------------
 * 4.  plug the downloaded binary into the FlatBuffers plugin
 * ---------------------------------------------------------- */
flatbuffers {
    flatcPath = file("$flatcDir/bin/flatc").absolutePath
    language  = 'java'            // or 'kotlin' if you prefer
}

/* ------------------------------------------------------------
 * 5.  make your code‑gen task wait for the download
 * ---------------------------------------------------------- */

//flatbuffers {
//    flatcPath = '/opt/homebrew/bin/flatc'
//    language = 'java'
//}

def generateFbs = tasks.register('generateFbs', FlatBuffers) {
    inputDir  = file('src/main/fbs')
    outputDir = file("build/generated/fbs")
    language  = 'java'                // or 'kotlin'
}

tasks.named('generateFbs') { dependsOn unpackFlatc }

kotlin {
    sourceSets {
        main {
            kotlin.srcDir generateFbs.map { it.outputDir }   // provider‑safe
        }
    }
}

tasks.named('compileJava') {
    dependsOn generateFbs
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {

    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    api 'com.kjetland:mbknor-jackson-jsonschema_2.13:1.0.39'
    api('io.airbyte.airbyte-protocol:protocol-models:0.15.0') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.api-client'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'javax.validation'
        exclude group: 'org.apache.commons'
        exclude group: 'commons-io'
    }
    api 'io.github.oshai:kotlin-logging-jvm:7.0.0'
    api 'io.micronaut:micronaut-runtime'
    api 'org.apache.mina:mina-core:2.0.27' // for fixing vulnerability of sshd-mina
    api 'org.apache.sshd:sshd-mina:2.13.2'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    api 'com.google.flatbuffers:flatbuffers-java:2.0.8'

    implementation 'com.datadoghq:dd-trace-api:1.39.0'
    implementation 'com.datadoghq:dd-trace-ot:1.39.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner'
    implementation 'info.picocli:picocli:4.7.6'
    implementation 'io.micronaut.picocli:micronaut-picocli:5.5.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'org.apache.logging.log4j:log4j-layout-template-json:2.24.0'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    implementation 'net.i2p.crypto:eddsa:0.3.0'
    implementation 'org.openapi4j:openapi-schema-validator:1.0.7'

    // this is only needed because of exclusions in airbyte-protocol
    runtimeOnly 'com.google.guava:guava:33.3.0-jre'
    runtimeOnly 'org.apache.commons:commons-compress:1.27.1'

    testFixturesApi 'org.jetbrains.kotlin:kotlin-test-junit'
    testFixturesApi 'org.jetbrains.kotlin:kotlin-reflect'
    testFixturesApi 'org.junit.jupiter:junit-jupiter-api'
    testFixturesApi 'org.junit.jupiter:junit-jupiter-params'
    testFixturesApi 'org.junit.jupiter:junit-jupiter-engine'
    testFixturesApi('org.testcontainers:testcontainers') {
        exclude group: 'org.apache.commons', module: 'commons-compress'
    }
    testFixturesApi 'io.micronaut.test:micronaut-test-core:4.5.0'
    testFixturesApi 'io.micronaut.test:micronaut-test-junit5:4.5.0'
    testFixturesApi 'io.github.deblockt:json-diff:1.1.0'
}

test {
    environment "PRESENT", "present-value"
}
